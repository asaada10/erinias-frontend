import { Elysia } from "elysia";
import { db } from "../../shared/infrastructure/db";
import * as table from "../../shared/infrastructure/db/schema";
import { eq, and, or, desc } from "drizzle-orm";
import { redis } from "../../shared/infrastructure/db/redis";
import Token from "../../shared/infrastructure/db/token";
import { authHook } from "../../hooks/auth";

export const chat = new Elysia().get(
  "/chat/:id",
  async ({ params, cookie, error }) => {
    const accessToken = cookie["access_token"].value;

    // Validar que el usuario esté autenticado
    if (!accessToken) {
      return error(401, { message: "Unauthorized" });
    }

    const tokenPayload = await Token.validate(accessToken, "access"); // Obtener ID del usuario autenticado
    if (!tokenPayload) {
      return error(401, { message: "Invalid token" });
    }

    let userId = tokenPayload.userId;
    const otherUserId = params.id ?? "";

    // Obtener los datos del otro usuario
    const otherUser = await db
      .select({
        id: table.user.id,
        username: table.user.username,
        avatar: table.user.avatar,
      })
      .from(table.user)
      .where(eq(table.user.id, otherUserId))
      .then((res) => res.at(0));

    if (!otherUser) {
      return error(404, { message: "User not found" });
    }

    // Verificar si hay mensajes en caché (Redis)
    const cachedMessages = await redis.get(
      `chat:messages:${userId}:${otherUserId}`
    );
    if (cachedMessages) {
      return {
        otherUser,
        messages: JSON.parse(cachedMessages),
      };
    }

    // Obtener mensajes recientes entre ambos usuarios
    const messages = await db
      .select({
        id: table.message.id,
        content: table.message.content,
        authorId: table.message.authorId,
        createdAt: table.message.createdAt,
      })
      .from(table.message)
      .where(
        or(
          and(
            eq(table.message.authorId, userId),
            eq(table.message.channelId, otherUserId)
          ),
          and(
            eq(table.message.authorId, otherUserId),
            eq(table.message.channelId, userId)
          )
        )
      )
      .orderBy(desc(table.message.createdAt))
      .limit(50); // Solo los últimos 50 mensajes

    // Guardar mensajes en caché (Redis) para futuras consultas
    await redis.set(
      `chat:messages:${userId}:${otherUserId}`,
      JSON.stringify(messages),
      "EX",
      60 * 5 // Cache por 5 minutos
    );

    return {
      otherUser,
      messages,
    };
  },
  {
    beforeHandle: authHook,
  }
);
